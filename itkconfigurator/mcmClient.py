
# send csr to mcm:
# {{MCM_ENDPOINT}}/dfsps/{dfspName}/enrollments/inbound
# {
#     "clientCSR": "-----BEGIN CERTIFICATE REQUEST-----MIICpjCCAY4CAQAwGzEZMBcGA1UEAxMQbW9qYWxvb3Atc2RrLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJzlr2hLg774Hfb8CRPXusz0zdbTQWZ2YsdZNCJu0HMXSZstfBjMx+/CH963rgnrp8oZATfMgtNxyJRWt1VFghr+8vNuC3SoqQj2C7gAq1VPqG0F9P8HR3vTil60cr2PmXagM9OuKxkhrUxoc6zl4IHGGQrH7ybGHL4Qr0sP8awopsEfEuHOuwCrk6YERpdedNCtuLPp/AvGr0Nml9Ak9brfOsLzc9MwVGgDBva9Tm98oqoq2/8Ce+rI964jDiZhy7fH3HH3+2Sw/+FaEfN9O1Ja5YFZgTVZ3+OaylGqg7C7Xh0CmuuTMDLgCh+C/78Jn2lK46NHMezHoOEOpvoybC8CAwEAAaBGMEQGCSqGSIb3DQEJDjE3MDUwMwYDVR0RBCwwKoIFamVidHCCBmplYnRwMoIQbW9qYWxvb3Atc2RrLmNvbYIHbW9qYXBpMTANBgkqhkiG9w0BAQsFAAOCAQEAWw3ZMNINc6HpPNQe8uEQiyPKof7outR0sxMRwppFEfzBr0R5wjmU2IsF9jmowWjX/Jl3UGWicpsNwG7BLkDehfqKy055lPess2eTUGH7+aqvjNN9LieHLR8jADjyS/rqE5EbF2AEsuP+jtwAE8/Guz4wgUNePND3xIqAmuvA1WY30uPetfiGdh7DAtKeId/RiHnyX1EyrXL3PWIowEw/xgCG+y+j5Od438ZMiVGVe7vGQyRUMqMAFAzF5/ZpaeTTrE8KkPOr7Tx4M3ezF6NYuD/65/p1pdFkdC5aoBRgJDs1oJdRbvCiTDkxXSCMRQ0QkxGnlvIGqDCWgZbXTjWbLg==-----END CERTIFICATE REQUEST-----"
# }


# generated by chatgpt

import requests
from typing import Optional, Dict

class ConnectionManagerClient:
    def __init__(self, base_url: str, token: Optional[str] = None):
        """
        Initialize the API client.
        :param base_url: Base URL of the API.
        :param token: Optional authentication token.
        """
        self.base_url = base_url.rstrip('/')
        self.token = token
        self.headers = {
            'Content-Type': 'application/json'
        }
        if token:
            self.headers['Authorization'] = f'Bearer {token}'

    def _request(self, method: str, endpoint: str, params: Optional[Dict] = None, json: Optional[Dict] = None, data: Optional[Dict] = None, headers: Optional[Dict] = None):
        """
        Internal method to make HTTP requests.
        """
        url = f"{self.base_url}{endpoint}"
        headers = headers or self.headers
        response = requests.request(method, url, headers=headers, params=params, json=json, data=data)
        response.raise_for_status()
        return response.json() if response.text else None

    def login(self, username: str, password: str):
        """Logs in a user and retrieves a JWT token."""
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json',
        }
        response = self._request('POST', '/login', data={'username': username, 'password': password}, headers=headers)
        self.token = response.get('token', {}).get('payload', {}).get('dfspId')
        self.headers['Authorization'] = f'Bearer {self.token}'
        return response

    def logout(self):
        """Logs out the user."""
        return self._request('POST', '/logout')

    def get_hub_endpoints(self):
        """Retrieves all hub endpoints."""
        return self._request('GET', '/hub/endpoints')

    def get_hub_ingress_ips(self):
        """Gets the Hub Ingress IPs."""
        return self._request('GET', '/hub/endpoints/ingress/ips')

    def create_hub_ingress_ip(self, ip_data: Dict):
        """Adds a new IP entry to the Hub Ingress endpoint."""
        return self._request('POST', '/hub/endpoints/ingress/ips', json=ip_data)

    def get_dfsp_list(self):
        """Returns a list of all DFSPs."""
        return self._request('GET', '/dfsps')

    def create_dfsp(self, dfsp_data: Dict):
        """Creates a new DFSP entry."""
        return self._request('POST', '/dfsps', json=dfsp_data)

    def get_dfsp_endpoints(self, dfsp_id: str):
        """Retrieves all endpoints for a given DFSP."""
        return self._request('GET', f'/dfsps/{dfsp_id}/endpoints')

    def create_dfsp_endpoint(self, dfsp_id: str, endpoint_data: Dict):
        """Adds a new endpoint configuration for a DFSP."""
        return self._request('POST', f'/dfsps/{dfsp_id}/endpoints', json=endpoint_data)

    def delete_dfsp_endpoint(self, dfsp_id: str, ep_id: str):
        """Deletes an endpoint entry."""
        return self._request('DELETE', f'/dfsps/{dfsp_id}/endpoints/{ep_id}')

    def create_dfsp_inbound_enrollment(self, dfsp_id: str, enrollment_data: Dict):
        """Creates a DFSP Inbound enrollment."""
        return self._request('POST', f'/dfsps/{dfsp_id}/enrollments/inbound', json=enrollment_data)

    def get_dfsp_inbound_enrollment(self, dfsp_id: str, en_id: str):
        """Retrieves a specific DFSP Inbound enrollment."""
        return self._request('GET', f'/dfsps/{dfsp_id}/enrollments/inbound/{en_id}')

# Example usage:
# client = ConnectionManagerClient("https://api.example.com")
# client.login("user", "pass")
# endpoints = client.get_hub_endpoints()
